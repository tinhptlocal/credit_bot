import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import {
  ChannelMessage,
  EButtonMessageStyle,
  EMessageComponentType,
} from 'mezon-sdk';
import { MAX_LOAN_AMOUNTS } from 'src/constant';
import { Loans, Roles, UserRoles, Users } from 'src/entities';
import { formatVND } from 'src/shared/helper';
import { MezonService } from 'src/shared/mezon/mezon.service';
import {
  EMessagePayloadType,
  EMessageType,
  MessageButtonClickedEvent,
} from 'src/shared/mezon/types/mezon.type';
import { LoanStatus, PaymentStatus } from 'src/types';
import { ButtonKey } from 'src/types/helper.type';
import { DataSource, Repository } from 'typeorm';

@Injectable()
export class LoanService {
  constructor(
    @InjectRepository(Loans)
    private readonly loansRepository: Repository<Loans>,
    @InjectRepository(Users)
    private readonly userRepository: Repository<Users>,
    private mezonService: MezonService,
    private dataSource: DataSource,
  ) {}

  private tempLoans = new Map<
    string,
    {
      userId: string;
      username: string;
      amount: string;
      interestRate: number;
      term: number;
      messageId: string;
    }
  >();

  createButtonUserClick() {
    return [
      {
        components: [
          {
            id: ButtonKey.ACCEPT,
            type: EMessageComponentType.BUTTON,
            component: { label: 'OK', style: EButtonMessageStyle.PRIMARY },
          },
          {
            id: ButtonKey.CANCEL,
            type: EMessageComponentType.BUTTON,
            component: { label: 'H·ªßy b·ªè', style: EButtonMessageStyle.DANGER },
          },
        ],
      },
    ];
  }

  private calculateEMI(
    principal: number,
    annualRate: number,
    termInMonths: number,
  ): {
    monthlyPayment: number;
    totalAmount: number;
    totalInterest: number;
    schedule: Array<{
      month: number;
      payment: number;
      principal: number;
      interest: number;
      remainingBalance: number;
    }>;
  } {
    const monthlyRate = annualRate / 12 / 100;

    const monthlyPayment =
      (principal * monthlyRate * Math.pow(1 + monthlyRate, termInMonths)) /
      (Math.pow(1 + monthlyRate, termInMonths) - 1);

    const totalAmount = monthlyPayment * termInMonths;
    const totalInterest = totalAmount - principal;

    let remainingBalance = principal;
    const schedule: Array<{
      month: number;
      payment: number;
      principal: number;
      interest: number;
      remainingBalance: number;
    }> = [];

    for (let month = 1; month <= termInMonths; month++) {
      const interest = remainingBalance * monthlyRate;
      const principalPaid = monthlyPayment - interest;
      remainingBalance -= principalPaid;

      schedule.push({
        month,
        payment: monthlyPayment,
        principal: principalPaid,
        interest,
        remainingBalance: Math.max(0, remainingBalance),
      });
    }

    return {
      monthlyPayment,
      totalAmount,
      totalInterest,
      schedule,
    };
  }

  private readonly loanTermOptions = {
    3: { baseRate: 12, maxAmount: 300000 }, // 3 months - 12% annual
    6: { baseRate: 15, maxAmount: 500000 }, // 6 months - 15% annual
    9: { baseRate: 18, maxAmount: 750000 }, // 9 months - 18% annual
    12: { baseRate: 20, maxAmount: 1000000 }, // 12 months - 20% annual
  };

  private validateLoanTerm(term: number): boolean {
    return term in this.loanTermOptions;
  }

  private validateLoanAmount(amount: number, term: number): boolean {
    return amount <= this.loanTermOptions[term].maxAmount;
  }

  private getLoanTermDetails(term: number) {
    return this.loanTermOptions[term];
  }

  private calculateInterestRate(creditScore: number, baseRate: number): number {
    if (creditScore >= 80) return baseRate - 2;
    if (creditScore >= 70) return baseRate - 1;
    if (creditScore >= 60) return baseRate;
    if (creditScore >= 50) return baseRate + 1;
    return baseRate + 2;
  }

  async requestLoan(data: ChannelMessage, amount: number, term: number) {
    const userId = data.sender_id;

    const user = await this.userRepository.findOne({
      where: { userId },
    });

    if (!user) {
      await this.userRepository.save(
        this.userRepository.create({
          userId: String(userId),
          balance: '0',
          creditScore: 100,
          username: data.username,
        }),
      );
    }

    const hasExistActiveLoan = await this.loansRepository.exists({
      where: {
        userId,
        status: LoanStatus.APPROVED,
      },
    });

    console.log('object', hasExistActiveLoan);

    if (hasExistActiveLoan) {
      const message =
        '‚ùå B·∫°n ƒëang c√≥ 1 kho·∫£n vay, h√£y thanh to√°n kho·∫£n vay ƒë√≥ tr∆∞·ªõc khi mu·ªën vay ti·∫øp!';
      await this.mezonService.sendMessage({
        type: EMessageType.CHANNEL,
        reply_to_message_id: data.message_id,
        payload: {
          channel_id: data.channel_id,
          message: {
            type: EMessagePayloadType.SYSTEM,
            content: message,
          },
        },
      });

      return;
    }

    if (amount > MAX_LOAN_AMOUNTS) {
      await this.mezonService.sendMessage({
        type: EMessageType.CHANNEL,
        reply_to_message_id: data.message_id,
        payload: {
          channel_id: data.channel_id,
          message: {
            type: EMessagePayloadType.SYSTEM,
            content:
              '‚ùå Bot ƒëang ngh√®o n√™n ch·ªâ c√≥ th·ªÉ cho vay d∆∞·ªõi 1.000.000 ƒë th√¥i :((((',
          },
        },
      });
      return;
    }

    if (term < 1 || term > 12) {
      await this.mezonService.sendMessage({
        type: EMessageType.CHANNEL,
        reply_to_message_id: data.message_id,
        payload: {
          channel_id: data.channel_id,
          message: {
            type: EMessagePayloadType.SYSTEM,
            content:
              '‚ùå Th·ªùi h·∫°n vay ph·∫£i t·ª´ 1 ƒë·∫øn 12 th√°ng, b·∫°n h√£y ki·ªÉm tra l·∫°i',
          },
        },
      });
      return;
    }

    const termDetails = this.getLoanTermDetails(term);
    const creditScore = user?.creditScore || 100;
    const finalRate = this.calculateInterestRate(
      creditScore,
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      termDetails.baseRate,
    );

    const loanDetails = this.calculateEMI(amount, finalRate, term);

    const scheduleMessage = loanDetails.schedule
      .map(
        (payment, index) =>
          `\t- Th√°ng th·ª© ${payment.month}: ${formatVND(payment.payment)} (G·ªëc: ${formatVND(payment.principal)}, L√£i: ${formatVND(payment.interest)})`,
      )
      .join('\n');

    const systemMessageText = `‚úÖ Kho·∫£n vay c·ªßa b·∫°n l√†:
    - S·ªë ti·ªÅn vay: ${formatVND(amount)}
    - L√£i su·∫•t c∆° b·∫£n: ${termDetails.baseRate}%/nƒÉm
    - L√£i su·∫•t theo ƒëi·ªÉm t√≠n d·ª•ng: ${finalRate}%/nƒÉm
    - K·ª≥ h·∫°n: ${term} th√°ng
    - Thanh to√°n h√†ng th√°ng: ${formatVND(loanDetails.monthlyPayment)}
    - T·ªïng ti·ªÅn ph·∫£i tr·∫£: ${formatVND(loanDetails.totalAmount)}
    - T·ªïng ti·ªÅn l√£i: ${formatVND(loanDetails.totalInterest)}
‚úÖ L·ªãch tr·∫£ n·ª£:
${scheduleMessage}
‚úÖ X√°c nh·∫≠n kho·∫£n vay c·ªßa b·∫°n`;

    const messageResponse = await this.mezonService.sendMessage({
      type: EMessageType.CHANNEL,
      reply_to_message_id: data.message_id,
      payload: {
        channel_id: data.channel_id,
        message: {
          type: EMessagePayloadType.OPTIONAL,
          content: {
            t: systemMessageText,
            components: this.createButtonUserClick(),
          },
        },
      },
    });

    this.tempLoans.set(messageResponse.message_id, {
      userId: String(userId),
      username: data.username || '',
      amount: String(amount),
      interestRate: finalRate,
      term,
      messageId: messageResponse.message_id,
    });

    return {};
  }

  async getLoanStatus(data: ChannelMessage) {
    const userId = data.sender_id;
    const user = await this.userRepository.findOne({
      where: { userId },
    });

    if (!user) {
      await this.mezonService.sendMessage({
        type: EMessageType.CHANNEL,
        reply_to_message_id: data.message_id,
        payload: {
          channel_id: data.channel_id,
          message: {
            type: EMessagePayloadType.SYSTEM,
            content: '‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n',
          },
        },
      });
      return;
    }

    const loans = await this.loansRepository.find({
      where: { userId },
      relations: ['payments'],
      order: { startDate: 'DESC' },
    });

    if (!loans.length) {
      await this.mezonService.sendMessage({
        type: EMessageType.CHANNEL,
        reply_to_message_id: data.message_id,
        payload: {
          channel_id: data.channel_id,
          message: {
            type: EMessagePayloadType.SYSTEM,
            content: 'üìù B·∫°n ch∆∞a c√≥ kho·∫£n vay n√†o',
          },
        },
      });
      return;
    }

    const loanStatus = loans
      .map((loan) => {
        const paidPayments = loan.payments.filter(
          (p) => p.status === PaymentStatus.PAID,
        );
        const totalPaid = paidPayments.reduce(
          (sum, p) => sum + Number(p.amount),
          0,
        );

        return `
üî∏ Kho·∫£n vay: ${formatVND(Number(loan.amount))}
üìÖ Ng√†y vay: ${loan.startDate.toLocaleDateString()}
‚è≥ Th·ªùi h·∫°n: ${loan.term} th√°ng
üí∞ ƒê√£ tr·∫£: ${formatVND(totalPaid)}
üìä Tr·∫°ng th√°i: ${loan.status}
      `;
      })
      .join('\n---\n');

    await this.mezonService.sendMessage({
      type: EMessageType.CHANNEL,
      reply_to_message_id: data.message_id,
      payload: {
        channel_id: data.channel_id,
        message: {
          type: EMessagePayloadType.SYSTEM,
          content: `üìä Th√¥ng tin kho·∫£n vay:\n${loanStatus}`,
        },
      },
    });
  }

  async getLoanActive(data: ChannelMessage) {
    const userId = data.sender_id;

    try {
      const activeLoans = await this.loansRepository.find({
        where: { status: LoanStatus.APPROVED, userId },
        relations: ['user', 'payments'],
        order: { startDate: 'DESC' },
      });

      if (!activeLoans.length) {
        await this.mezonService.sendMessage({
          type: EMessageType.CHANNEL,
          reply_to_message_id: data.message_id,
          payload: {
            channel_id: data.channel_id,
            message: {
              type: EMessagePayloadType.SYSTEM,
              content:
                'üìã **Danh s√°ch kho·∫£n vay**\n\nB·∫°n kh√¥ng c√≥ kho·∫£n vay n√†o ƒëang ho·∫°t ƒë·ªông.',
            },
          },
        });
        return;
      }

      let message = 'üè¶ **Danh s√°ch kho·∫£n vay ƒëang ho·∫°t ƒë·ªông**\n\n';

      activeLoans.forEach((loan, index) => {
        message += `${index + 1}. **Kho·∫£n vay #${loan.id}**\n`;
        message += `   üÜî **Loan ID: ${loan.id}**\n`;
        message += `   üí∞ S·ªë ti·ªÅn: ${loan.amount} VND\n`;
        message += `   üìÖ Ng√†y vay: ${loan.startDate.toLocaleDateString()}\n`;
        message += `   ‚è≥ K·ª≥ h·∫°n: ${loan.term} th√°ng\n`;
        message += `   üìä Tr·∫°ng th√°i: ${loan.status}\n`;

        const pendingPayments =
          loan.payments?.filter(
            (p) =>
              p.status === PaymentStatus.PENDING ||
              p.status === PaymentStatus.OVERDUE,
          ) || [];

        if (pendingPayments.length > 0) {
          message += `   üí≥ **Thanh to√°n c·∫ßn tr·∫£:**\n`;
          pendingPayments.slice(0, 3).forEach((payment, payIndex) => {
            message += `      ${payIndex + 1}. Payment ID: \`${payment.id}\` - ${payment.amount} VND - H·∫°n: ${new Date(payment.dueDate).toLocaleDateString()}\n`;
            message += `         ‚ñ∂Ô∏è L·ªánh: \`$tt ${payment.id} ${payment.amount}\`\n`;
          });
          if (pendingPayments.length > 3) {
            message += `      ... v√† ${pendingPayments.length - 3} thanh to√°n kh√°c\n`;
          }
        }

        // T√≠nh to√°n s·ªë ti·ªÅn thanh to√°n tr∆∞·ªõc h·∫°n
        const earlyPayment = this.calculateEarlyPaymentAmount(loan);

        message += `   üí∞ **Thanh to√°n tr∆∞·ªõc h·∫°n:**\n`;
        message += `      ‚Ä¢ T·ªïng c·∫ßn tr·∫£: ${formatVND(earlyPayment.totalAmount)}\n`;
        message += `      ‚Ä¢ L√£i ti·∫øt ki·ªám: ${formatVND(earlyPayment.interestSaved)}\n`;
        message += `      ‚Ä¢ L·ªánh: \`$tth ${loan.id}\`\n\n`;
      });

      message += 'üí° **G·ª£i √Ω:**\n';
      message +=
        '‚Ä¢ Copy ch√≠nh x√°c Payment ID ƒë·ªÉ thanh to√°n: `$tt <payment_id> <s·ªë_ti·ªÅn>`\n';
      message += '‚Ä¢ S·ª≠ d·ª•ng `$tth <loan_id>` ƒë·ªÉ thanh to√°n tr∆∞·ªõc h·∫°n to√†n b·ªô\n';
      message += '‚Ä¢ Thanh to√°n tr∆∞·ªõc h·∫°n s·∫Ω ti·∫øt ki·ªám l√£i su·∫•t\n';
      message += '‚Ä¢ TƒÉng ƒëi·ªÉm t√≠n d·ª•ng c·ªßa b·∫°n';

      await this.mezonService.sendMessage({
        type: EMessageType.CHANNEL,
        reply_to_message_id: data.message_id,
        payload: {
          channel_id: data.channel_id,
          message: {
            type: EMessagePayloadType.SYSTEM,
            content: message,
          },
        },
      });
    } catch (error) {
      await this.mezonService.sendMessage({
        type: EMessageType.CHANNEL,
        reply_to_message_id: data.message_id,
        payload: {
          channel_id: data.channel_id,
          message: {
            type: EMessagePayloadType.SYSTEM,
            content: '‚ùå L·ªói khi l·∫•y danh s√°ch kho·∫£n vay.',
          },
        },
      });
    }
  }

  async getPaymentSchedule(data: ChannelMessage, username?: string) {
    if (username) {
      const user = await this.userRepository.findOne({
        where: { username },
      });

      if (!user) {
        await this.mezonService.sendMessage({
          type: EMessageType.CHANNEL,
          reply_to_message_id: data.message_id,
          payload: {
            channel_id: data.channel_id,
            message: {
              type: EMessagePayloadType.SYSTEM,
              content: `‚ùå Kh√¥ng t√¨m th·∫•y user: ${username}`,
            },
          },
        });
        return;
      }

      // Get loan for specified user
      const activeLoan = await this.loansRepository.findOne({
        where: {
          userId: user.userId,
          status: LoanStatus.APPROVED,
        },
        relations: ['payments'],
        order: { startDate: 'DESC' },
      });

      if (!activeLoan) {
        await this.mezonService.sendMessage({
          type: EMessageType.CHANNEL,
          reply_to_message_id: data.message_id,
          payload: {
            channel_id: data.channel_id,
            message: {
              type: EMessagePayloadType.SYSTEM,
              content: `‚ùå User ${username} kh√¥ng c√≥ kho·∫£n vay ƒëang ho·∫°t ƒë·ªông!`,
            },
          },
        });
        return;
      }

      await this.sendPaymentSchedule(data, activeLoan, username);
    } else {
      const activeLoan = await this.loansRepository.findOne({
        where: {
          userId: data.sender_id,
          status: LoanStatus.APPROVED,
        },
        relations: ['payments'],
        order: { startDate: 'DESC' },
      });

      if (!activeLoan) {
        await this.mezonService.sendMessage({
          type: EMessageType.CHANNEL,
          reply_to_message_id: data.message_id,
          payload: {
            channel_id: data.channel_id,
            message: {
              type: EMessagePayloadType.SYSTEM,
              content: '‚ùå B·∫°n kh√¥ng c√≥ kho·∫£n vay ƒëang ho·∫°t ƒë·ªông n√†o!',
            },
          },
        });
        return;
      }

      await this.sendPaymentSchedule(data, activeLoan);
    }
  }

  private async sendPaymentSchedule(
    data: ChannelMessage,
    loan: Loans,
    username?: string,
  ) {
    const sortedPayments = loan.payments.sort(
      (a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime(),
    );

    const totalPaid = sortedPayments
      .filter((p) => p.status === PaymentStatus.PAID)
      .reduce((sum, p) => sum + Number(p.amount), 0);

    const scheduleMessage = sortedPayments
      .map((payment, index) => {
        const dueDate = new Date(payment.dueDate).toLocaleDateString();
        const statusEmoji = {
          [PaymentStatus.PAID]: '‚úÖ',
          [PaymentStatus.PENDING]: '‚è≥',
          [PaymentStatus.OVERDUE]: '‚ùå',
          [PaymentStatus.MINIMUM_PAID]: '‚ö†Ô∏è',
        };

        return `${statusEmoji[payment.status]} K·ª≥ ${index + 1} - ${dueDate}:
\tüí∞ S·ªë ti·ªÅn: ${formatVND(Number(payment.amount))}
\tüí≥ T·ªëi thi·ªÉu: ${formatVND(Number(payment.minimumAmount))}
\tüìä Tr·∫°ng th√°i: ${payment.status.toUpperCase()}${
          payment.paidDate
            ? `\n\tüìÖ Ng√†y thanh to√°n: ${new Date(payment.paidDate).toLocaleDateString()}`
            : ''
        }`;
      })
      .join('\n\n');

    const message = `üìã L·ªãch tr·∫£ n·ª£ kho·∫£n vay #${loan.id}${username ? ` c·ªßa ${username}` : ''}:
üíµ S·ªë ti·ªÅn vay: ${formatVND(Number(loan.amount))}
üí∞ ƒê√£ tr·∫£: ${formatVND(totalPaid)}
‚öñÔ∏è C√≤n l·∫°i: ${formatVND(Number(loan.amount) - totalPaid)}
üìÖ Ng√†y vay: ${loan.startDate.toLocaleDateString()}
‚è≥ K·ª≥ h·∫°n: ${loan.term} th√°ng
üí´ L√£i su·∫•t: ${loan.interstRate}%/nƒÉm

${scheduleMessage}

üìù Ch√∫ th√≠ch:
‚úÖ ƒê√£ thanh to√°n
‚è≥ Ch·ªù thanh to√°n
‚ùå Qu√° h·∫°n
‚ö†Ô∏è Thanh to√°n t·ªëi thi·ªÉu`;

    await this.mezonService.sendMessage({
      type: EMessageType.CHANNEL,
      reply_to_message_id: data.message_id,
      payload: {
        channel_id: data.channel_id,
        message: {
          type: EMessagePayloadType.SYSTEM,
          content: message,
        },
      },
    });
  }

  async handleAcceptLoanByUser(data: MessageButtonClickedEvent) {
    const tempLoan = this.tempLoans.get(data.message_id);

    if (!tempLoan) {
      await this.mezonService.sendMessage({
        type: EMessageType.CHANNEL,
        reply_to_message_id: data.message_id,
        payload: {
          channel_id: data.channel_id,
          message: {
            type: EMessagePayloadType.SYSTEM,
            content: '‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin kho·∫£n vay ho·∫∑c ƒë√£ h·∫øt h·∫°n!',
          },
        },
      });
      return;
    }

    const loan = await this.loansRepository.save(
      this.loansRepository.create({
        userId: tempLoan.userId,
        amount: tempLoan.amount,
        interstRate: tempLoan.interestRate,
        term: tempLoan.term,
        status: LoanStatus.PENDING,
        startDate: new Date(),
        endDate: new Date(
          Date.now() + tempLoan.term * 30 * 24 * 60 * 60 * 1000,
        ),
        timestamp: {
          createdById: tempLoan.userId,
        },
      }),
    );

    this.tempLoans.delete(data.message_id);

    await this.mezonService.updateMessage({
      channel_id: data.channel_id,
      message_id: data.message_id,
      content: {
        type: EMessagePayloadType.OPTIONAL,
        content: {
          t: '‚úÖ B·∫°n ƒë√£ x√°c nh·∫≠n kho·∫£n vay, vui l√≤ng ch·ªù admin duy·ªát kho·∫£n vay c·ªßa b·∫°n!',
        },
      },
    });

    const adminIds = await this.getAdminUserIds();

    for (const adminId of adminIds) {
      await this.mezonService.sendMessage({
        type: EMessageType.DM,
        payload: {
          clan_id: '0',
          user_id: adminId,
          message: {
            type: EMessagePayloadType.SYSTEM,
            content: `üîî C√≥ y√™u c·∫ßu vay m·ªõi c·∫ßn duy·ªát:
- User ID: ${tempLoan.userId}
- User Name: ${tempLoan.username}
- S·ªë ti·ªÅn: ${formatVND(Number(tempLoan.amount))}
- K·ª≥ h·∫°n: ${tempLoan.term} th√°ng
- L√£i su·∫•t: ${tempLoan.interestRate}%/nƒÉm
- Loan ID: ${loan.id}

S·ª≠ d·ª•ng l·ªánh $admin approve ${loan.id} ƒë·ªÉ duy·ªát kho·∫£n vay,
S·ª≠ d·ª•ng l·ªánh $admin reject ${loan.id} <reason> ƒë·ªÉ t·ª´ ch·ªëi kho·∫£n vay`,
          },
        },
      });
    }
  }

  async getAdminUserIds(): Promise<string[]> {
    const result = await this.dataSource
      .getRepository(UserRoles)
      .createQueryBuilder('ur')
      .select('ur.userId', 'userId')
      .innerJoin(Roles, 'r', 'ur.roleId = r.id')
      .where('r.name = :roleName', { roleName: 'admin' })
      .getRawMany();

    return result.map((row) => row.userId);
  }

  async handleLoanApproval(loanId: string, adminId: string) {
    const loan = await this.loansRepository.findOne({
      where: { id: loanId },
      relations: ['user'],
    });

    if (!loan) {
      throw new Error('Loan not found');
    }

    await this.mezonService.sendMessage({
      type: EMessageType.DM,
      payload: {
        clan_id: '0',
        user_id: loan.userId,
        message: {
          type: EMessagePayloadType.SYSTEM,
          content: `‚úÖ Kho·∫£n vay c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát:
- S·ªë ti·ªÅn vay: ${formatVND(Number(loan.amount))}
- K·ª≥ h·∫°n: ${loan.term} th√°ng
- L√£i su·∫•t: ${loan.interstRate}%/nƒÉm
- Loan ID: ${loan.id}

üí° H·ªá th·ªëng s·∫Ω nh·∫Øc nh·ªü b·∫°n khi ƒë·∫øn h·∫°n thanh to√°n.
‚ö†Ô∏è Thanh to√°n ƒë√∫ng h·∫°n ƒë·ªÉ duy tr√¨ ƒëi·ªÉm t√≠n d·ª•ng t·ªët!`,
        },
      },
    });
  }

  async handleLoanRejection(loanId: string, adminId: string, reason: string) {
    const loan = await this.loansRepository.findOne({
      where: { id: loanId },
      relations: ['user'],
    });

    if (!loan) {
      throw new Error('Loan not found');
    }

    loan.status = LoanStatus.REJECTED;
    await this.loansRepository.save(loan);

    await this.mezonService.sendMessage({
      type: EMessageType.DM,
      payload: {
        clan_id: '0',
        user_id: loan.userId,
        message: {
          type: EMessagePayloadType.SYSTEM,
          content: `‚ùå Kho·∫£n vay c·ªßa b·∫°n ƒë√£ b·ªã t·ª´ ch·ªëi:
- S·ªë ti·ªÅn vay: ${formatVND(Number(loan.amount))}
- K·ª≥ h·∫°n: ${loan.term} th√°ng
- Loan ID: ${loan.id}
${reason ? `\nüìù L√Ω do: ${reason}` : ''}

üí° B·∫°n c√≥ th·ªÉ t·∫°o y√™u c·∫ßu vay m·ªõi v·ªõi s·ªë ti·ªÅn ho·∫∑c k·ª≥ h·∫°n kh√°c.`,
        },
      },
    });
  }

  async handleCancelLoanByUser(data: MessageButtonClickedEvent) {
    this.tempLoans.delete(data.message_id);

    return this.mezonService.updateMessage({
      channel_id: data.channel_id,
      message_id: data.message_id,
      content: {
        type: EMessagePayloadType.OPTIONAL,
        content: {
          t: '‚ùå B·∫°n ƒë√£ h·ªßy y√™u c·∫ßu vay ti·ªÅn!',
        },
      },
    });
  }

  /**
   * T√≠nh to√°n s·ªë ti·ªÅn c·∫ßn thanh to√°n tr∆∞·ªõc h·∫°n cho m·ªôt loan
   */
  private calculateEarlyPaymentAmount(loan: Loans): {
    totalAmount: number;
    principalRemaining: number;
    interestSaved: number;
  } {
    // L·∫•y c√°c payments ƒë√£ thanh to√°n
    const paidPayments =
      loan.payments?.filter(
        (p) =>
          p.status === PaymentStatus.PAID ||
          p.status === PaymentStatus.MINIMUM_PAID,
      ) || [];

    // L·∫•y c√°c payments ch∆∞a thanh to√°n
    const unpaidPayments =
      loan.payments?.filter(
        (p) =>
          p.status === PaymentStatus.PENDING ||
          p.status === PaymentStatus.OVERDUE,
      ) || [];

    // T√≠nh s·ªë ti·ªÅn g·ªëc ƒë√£ tr·∫£ (∆∞·ªõc t√≠nh 70% l√† g·ªëc, 30% l√† l√£i)
    const principalPaid = paidPayments.reduce((sum, payment) => {
      const paymentAmount = parseFloat(payment.amount);
      const estimatedPrincipal = paymentAmount * 0.7;
      return sum + estimatedPrincipal;
    }, 0);

    // T√≠nh s·ªë ti·ªÅn g·ªëc c√≤n l·∫°i
    const loanPrincipal = parseFloat(loan.amount);
    const principalRemaining = Math.max(0, loanPrincipal - principalPaid);

    // T√≠nh t·ªïng ti·ªÅn ph·∫£i tr·∫£ theo l·ªãch (ch∆∞a thanh to√°n)
    const remainingScheduledAmount = unpaidPayments.reduce((sum, payment) => {
      return sum + parseFloat(payment.amount) + parseFloat(payment.fee || '0');
    }, 0);

    // L√£i ti·∫øt ki·ªám ƒë∆∞·ª£c (20% s·ªë ti·ªÅn c√≤n l·∫°i)
    const interestSaved = remainingScheduledAmount * 0.2;

    // T·ªïng ti·ªÅn c·∫ßn thanh to√°n = S·ªë ti·ªÅn theo l·ªãch - L√£i ti·∫øt ki·ªám
    const totalAmount = Math.max(0, remainingScheduledAmount - interestSaved);

    return {
      totalAmount,
      principalRemaining,
      interestSaved,
    };
  }

  async handleCLickButton(data: MessageButtonClickedEvent) {
    switch (data.button_id) {
      case ButtonKey.ACCEPT.toString():
        return this.handleAcceptLoanByUser(data);
      case ButtonKey.CANCEL.toString():
        return this.handleCancelLoanByUser(data);
      default:
        return;
    }
  }
}
