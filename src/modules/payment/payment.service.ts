import { Injectable, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, LessThan, MoreThan, DataSource } from 'typeorm';
import { Payments, Loans, Users, Transactions } from 'src/entities';
import { PaymentStatus, LoanStatus, TransactionType } from 'src/types';
import { ChannelMessage } from 'mezon-sdk';
import { MezonService } from 'src/shared/mezon/mezon.service';
import { EMessageType, EMessagePayloadType } from 'src/shared/mezon/types/mezon.type';
import { formatVND } from 'src/shared/helper';
import { ADMIN_IDS } from 'src/constant';

@Injectable()
export class PaymentService {
  private readonly logger = new Logger(PaymentService.name);

  constructor(
    @InjectRepository(Payments)
    private readonly paymentsRepository: Repository<Payments>,
    @InjectRepository(Loans)
    private readonly loansRepository: Repository<Loans>,
    @InjectRepository(Users)
    private readonly usersRepository: Repository<Users>,
    @InjectRepository(Transactions)
    private readonly transactionsRepository: Repository<Transactions>,
    private readonly mezonService: MezonService,
    private readonly dataSource: DataSource,
  ) {}

  /**
   * Thanh to√°n tr∆∞·ªõc h·∫°n to√†n b·ªô kho·∫£n vay
   */
  async payEarlyFullLoan(data: ChannelMessage, loanId: string): Promise<void> {
    try {
      const userId = data.sender_id;

      // Ki·ªÉm tra loan c√≥ t·ªìn t·∫°i v√† thu·ªôc v·ªÅ user
      const loan = await this.loansRepository.findOne({
        where: { id: loanId, userId },
        relations: ['payments'],
      });

      if (!loan) {
        await this.sendMessage(data, '‚ùå Kh√¥ng t√¨m th·∫•y kho·∫£n vay n√†y ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.');
        return;
      }

      if (loan.status === LoanStatus.REPAID) {
        await this.sendMessage(data, '‚úÖ Kho·∫£n vay n√†y ƒë√£ ƒë∆∞·ª£c thanh to√°n ƒë·∫ßy ƒë·ªß r·ªìi.');
        return;
      }

      if (loan.status !== LoanStatus.APPROVED) {
        await this.sendMessage(data, '‚ùå Ch·ªâ c√≥ th·ªÉ thanh to√°n tr∆∞·ªõc h·∫°n cho c√°c kho·∫£n vay ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát.');
        return;
      }

      // T√≠nh to√°n t·ªïng s·ªë ti·ªÅn c·∫ßn thanh to√°n
      const calculation = await this.calculateEarlyPaymentAmount(loan);

      // Ki·ªÉm tra s·ªë d∆∞ user
      const user = await this.usersRepository.findOne({ where: { userId } });
      if (!user || parseFloat(user.balance) < calculation.totalAmount) {
        await this.sendMessage(data,
          `‚ùå **S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ thanh to√°n tr∆∞·ªõc h·∫°n**\n\n` +
          `üí∞ C·∫ßn: ${formatVND(calculation.totalAmount)}\n` +
          `üí≥ C√≥: ${formatVND(parseFloat(user?.balance || '0'))}\n` +
          `üí∏ Thi·∫øu: ${formatVND(calculation.totalAmount - parseFloat(user?.balance || '0'))}`
        );
        return;
      }

      // Hi·ªÉn th·ªã th√¥ng tin v√† y√™u c·∫ßu x√°c nh·∫≠n
      const confirmMessage = this.formatEarlyPaymentConfirmation(loan, calculation);
      await this.sendMessage(data, confirmMessage);

    } catch (error) {
      this.logger.error('Error in early payment:', error);
      await this.sendMessage(data, '‚ùå L·ªói khi x·ª≠ l√Ω thanh to√°n tr∆∞·ªõc h·∫°n.');
    }
  }

  /**
   * X√°c nh·∫≠n v√† th·ª±c hi·ªán thanh to√°n tr∆∞·ªõc h·∫°n
   */
  async confirmEarlyPayment(data: ChannelMessage, loanId: string): Promise<void> {
    try {
      const userId = data.sender_id;

      const loan = await this.loansRepository.findOne({
        where: { id: loanId, userId },
        relations: ['payments'],
      });

      if (!loan) {
        await this.sendMessage(data, '‚ùå Kh√¥ng t√¨m th·∫•y kho·∫£n vay.');
        return;
      }

      const calculation = await this.calculateEarlyPaymentAmount(loan);
      const user = await this.usersRepository.findOne({ where: { userId } });

      if (!user || parseFloat(user.balance) < calculation.totalAmount) {
        await this.sendMessage(data, 
          `‚ùå **S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ thanh to√°n tr∆∞·ªõc h·∫°n**\n\n` +
          `üí∞ **Th√¥ng tin thanh to√°n:**\n` +
          `‚Ä¢ C·∫ßn thanh to√°n: ${formatVND(calculation.totalAmount)}\n` +
          `‚Ä¢ S·ªë d∆∞ hi·ªán t·∫°i: ${formatVND(parseFloat(user?.balance || '0'))}\n` +
          `‚Ä¢ C√≤n thi·∫øu: ${formatVND(calculation.totalAmount - parseFloat(user?.balance || '0'))}\n\n` +
          `üí° Vui l√≤ng n·∫°p th√™m ti·ªÅn v√†o t√†i kho·∫£n ƒë·ªÉ thanh to√°n tr∆∞·ªõc h·∫°n.`
        );
        return;
      }

      // Th·ª±c hi·ªán thanh to√°n
      await this.executeEarlyPayment(loan, user, calculation, data);

    } catch (error) {
      this.logger.error('Error confirming early payment:', error);
      await this.sendMessage(data, '‚ùå L·ªói khi x√°c nh·∫≠n thanh to√°n tr∆∞·ªõc h·∫°n.');
    }
  }

  /**
   * T√≠nh to√°n s·ªë ti·ªÅn thanh to√°n tr∆∞·ªõc h·∫°n
   */
  private async calculateEarlyPaymentAmount(loan: Loans): Promise<{
    principalRemaining: number;
    interestSaved: number;
    totalAmount: number;
    feesPaid: number;
    paymentsCompleted: number;
    paymentsRemaining: number;
  }> {
    // L·∫•y c√°c payments ƒë√£ thanh to√°n
    const paidPayments = loan.payments.filter(p =>
      p.status === PaymentStatus.PAID || p.status === PaymentStatus.MINIMUM_PAID
    );

    // L·∫•y c√°c payments ch∆∞a thanh to√°n
    const unpaidPayments = loan.payments.filter(p =>
      p.status === PaymentStatus.PENDING || p.status === PaymentStatus.OVERDUE
    );

    // T√≠nh s·ªë ti·ªÅn g·ªëc ƒë√£ tr·∫£
    const principalPaid = paidPayments.reduce((sum, payment) => {
      // Gi·∫£ s·ª≠ trong payment c√≥ th√¥ng tin v·ªÅ principal v√† interest
      // N·∫øu kh√¥ng c√≥, t·∫°m t√≠nh 70% l√† g·ªëc, 30% l√† l√£i
      const paymentAmount = parseFloat(payment.amount);
      const estimatedPrincipal = paymentAmount * 0.7; // Estimate, should be calculated properly
      return sum + estimatedPrincipal;
    }, 0);

    // T√≠nh s·ªë ti·ªÅn g·ªëc c√≤n l·∫°i
    const loanPrincipal = parseFloat(loan.amount);
    const principalRemaining = loanPrincipal - principalPaid;

    // T√≠nh l√£i ƒë√£ tr·∫£
    const feesPaid = paidPayments.reduce((sum, payment) => {
      return sum + parseFloat(payment.fee || '0');
    }, 0);

    // T√≠nh l√£i ti·∫øt ki·ªám ƒë∆∞·ª£c (ch·ªâ tr·∫£ l√£i cho th·ªùi gian ƒë√£ vay)
    const totalScheduledAmount = loan.payments.reduce((sum, payment) => {
      return sum + parseFloat(payment.amount);
    }, 0);

    const remainingScheduledAmount = unpaidPayments.reduce((sum, payment) => {
      return sum + parseFloat(payment.amount);
    }, 0);

    // L√£i ti·∫øt ki·ªám = L√£i d·ª± ki·∫øn - L√£i th·ª±c t·∫ø (gi·∫£m 20% l√£i cho thanh to√°n tr∆∞·ªõc h·∫°n)
    const interestSaved = remainingScheduledAmount * 0.2;

    // T·ªïng ti·ªÅn c·∫ßn thanh to√°n = G·ªëc c√≤n l·∫°i + Ph√≠ ph·∫°t (n·∫øu c√≥) - L√£i ti·∫øt ki·ªám
    const totalFees = unpaidPayments.reduce((sum, payment) => {
      return sum + parseFloat(payment.fee || '0');
    }, 0);

    const totalAmount = principalRemaining + totalFees - interestSaved;

    return {
      principalRemaining: Math.max(0, principalRemaining),
      interestSaved: Math.max(0, interestSaved),
      totalAmount: Math.max(0, totalAmount),
      feesPaid,
      paymentsCompleted: paidPayments.length,
      paymentsRemaining: unpaidPayments.length,
    };
  }

  /**
   * Th·ª±c hi·ªán thanh to√°n tr∆∞·ªõc h·∫°n
   */
  private async executeEarlyPayment(
    loan: Loans,
    user: Users,
    calculation: any,
    data: ChannelMessage
  ): Promise<void> {
    // S·ª≠ d·ª•ng database transaction ƒë·ªÉ ƒë·∫£m b·∫£o atomicity
    await this.dataSource.transaction(async manager => {
      // T·∫°o transaction cho thanh to√°n tr∆∞·ªõc h·∫°n
      const transaction = await manager.save(Transactions, {
        transactionId: `EARLY_PAY_${Date.now()}_${loan.id}`,
        userId: user.userId,
        loanId: loan.id,
        amount: calculation.totalAmount.toString(),
        type: TransactionType.PAYMENT,
        status: 'completed',
      });

      // C·∫≠p nh·∫≠t s·ªë d∆∞ user (tr·ª´ ti·ªÅn t·ª´ user)
      const oldBalance = parseFloat(user.balance);
      const newBalance = oldBalance - calculation.totalAmount;
      
      this.logger.log(`Early payment: User ${user.userId}, Old balance: ${oldBalance}, Amount: ${calculation.totalAmount}, New balance: ${newBalance}`);
      
      await manager.update(Users, user.userId, {
        balance: newBalance.toString(),
      });

      // Chuy·ªÉn ti·ªÅn v√†o balance c·ªßa bot/admin
      await this.transferToBotWithManager(calculation.totalAmount, manager);

      // C·∫≠p nh·∫≠t t·∫•t c·∫£ payments c√≤n l·∫°i th√†nh PAID
      const unpaidPayments = loan.payments.filter(p =>
        p.status === PaymentStatus.PENDING || p.status === PaymentStatus.OVERDUE
      );

      for (const payment of unpaidPayments) {
        await manager.update(Payments, payment.id, {
          status: PaymentStatus.PAID,
          paidDate: new Date().toISOString().split('T')[0],
        });
      }

      // C·∫≠p nh·∫≠t loan status
      await manager.update(Loans, loan.id, {
        status: LoanStatus.REPAID,
      });

      this.logger.log(`Early payment for loan ${loan.id} processed successfully`);
    });

    // G·ª≠i th√¥ng b√°o th√†nh c√¥ng (ngo√†i transaction)
    const successMessage = this.formatEarlyPaymentSuccess(loan, calculation, `EARLY_PAY_${Date.now()}_${loan.id}`);
    await this.sendMessage(data, successMessage);
  }

  /**
   * Format th√¥ng tin x√°c nh·∫≠n thanh to√°n tr∆∞·ªõc h·∫°n
   */
  private formatEarlyPaymentConfirmation(loan: Loans, calculation: any): string {
    let message = 'üí∞ **X√ÅC NH·∫¨N THANH TO√ÅN TR∆Ø·ªöC H·∫†N**\n\n';
    message += `üè¶ **Kho·∫£n vay #${loan.id}**\n`;
    message += `üíµ S·ªë ti·ªÅn vay g·ªëc: ${formatVND(parseFloat(loan.amount))}\n`;
    message += `üìä ƒê√£ thanh to√°n: ${calculation.paymentsCompleted}/${loan.payments.length} k·ª≥\n\n`;

    message += `üìã **Chi ti·∫øt thanh to√°n tr∆∞·ªõc h·∫°n:**\n`;
    message += `‚Ä¢ G·ªëc c√≤n l·∫°i: ${formatVND(calculation.principalRemaining)}\n`;
    message += `‚Ä¢ Ph√≠ ph·∫°t (n·∫øu c√≥): ${formatVND(calculation.feesPaid)}\n`;
    message += `‚Ä¢ L√£i ti·∫øt ki·ªám ƒë∆∞·ª£c: -${formatVND(calculation.interestSaved)}\n`;
    message += `‚Ä¢ **T·ªïng c·∫ßn thanh to√°n: ${formatVND(calculation.totalAmount)}**\n\n`;

    message += `‚úÖ **L·ª£i √≠ch:**\n`;
    message += `‚Ä¢ Ti·∫øt ki·ªám l√£i: ${formatVND(calculation.interestSaved)}\n`;
    message += `‚Ä¢ Ho√†n th√†nh s·ªõm ${calculation.paymentsRemaining} k·ª≥ thanh to√°n\n`;
    message += `‚Ä¢ TƒÉng ƒëi·ªÉm t√≠n d·ª•ng\n\n`;

    message += `üí° **ƒê·ªÉ x√°c nh·∫≠n thanh to√°n, g√µ:**\n`;
    message += `\`$xntt ${loan.id}\`\n\n`;
    message += `‚ö†Ô∏è **L∆∞u √Ω:** Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c!`;

    return message;
  }

  /**
   * Format th√¥ng b√°o th√†nh c√¥ng thanh to√°n tr∆∞·ªõc h·∫°n
   */
  private formatEarlyPaymentSuccess(loan: Loans, calculation: any, transactionId: string): string {
    let message = 'üéâ **THANH TO√ÅN TR∆Ø·ªöC H·∫†N TH√ÄNH C√îNG!**\n\n';
    message += `üÜî M√£ giao d·ªãch: ${transactionId}\n`;
    message += `üè¶ Kho·∫£n vay #${loan.id} ƒë√£ ƒë∆∞·ª£c thanh to√°n ƒë·∫ßy ƒë·ªß\n\n`;

    message += `üí∞ **T·ªïng k·∫øt:**\n`;
    message += `‚Ä¢ S·ªë ti·ªÅn ƒë√£ thanh to√°n: ${formatVND(calculation.totalAmount)}\n`;
    message += `‚Ä¢ L√£i ti·∫øt ki·ªám ƒë∆∞·ª£c: ${formatVND(calculation.interestSaved)}\n`;
    message += `‚Ä¢ Ho√†n th√†nh s·ªõm: ${calculation.paymentsRemaining} k·ª≥\n\n`;

    message += `üìà **L·ª£i √≠ch ƒë·∫°t ƒë∆∞·ª£c:**\n`;
    message += `‚Ä¢ ‚úÖ Kho·∫£n vay ƒë√£ ho√†n th√†nh\n`;
    message += `‚Ä¢ üí∞ Ti·∫øt ki·ªám chi ph√≠ l√£i\n`;
    message += `‚Ä¢ üìä TƒÉng ƒëi·ªÉm t√≠n d·ª•ng\n`;
    message += `‚Ä¢ üÜì C√≥ th·ªÉ vay m·ªõi v·ªõi ƒëi·ªÅu ki·ªán t·ªët h∆°n\n\n`;

    message += `üèÜ Ch√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh kho·∫£n vay tr∆∞·ªõc th·ªùi h·∫°n!`;

    return message;
  }

  /**
   * L·∫•y t·∫•t c·∫£ payments c·ªßa user (pending v√† overdue)
   */
  async getAllPayments(data: ChannelMessage): Promise<void> {
    try {
      const userId = data.sender_id;
      
      const pendingPayments = await this.paymentsRepository.find({
        where: [
          { userId, status: PaymentStatus.PENDING },
          { userId, status: PaymentStatus.OVERDUE },
        ],
        relations: ['loan'],
        order: { dueDate: 'ASC' },
      });

      if (!pendingPayments.length) {
        await this.sendMessage(data, '‚úÖ **Danh s√°ch thanh to√°n**\n\nB·∫°n kh√¥ng c√≥ kho·∫£n thanh to√°n n√†o ƒëang ch·ªù x·ª≠ l√Ω.');
        return;
      }

      let message = 'üìã **T·∫•t c·∫£ thanh to√°n c·∫ßn x·ª≠ l√Ω**\n\n';
      
      pendingPayments.forEach((payment, index) => {
        const daysUntilDue = this.getDaysUntilDue(payment.dueDate);
        const isOverdue = daysUntilDue < 0;
        const statusIcon = isOverdue ? 'üî¥' : (daysUntilDue <= 3 ? 'üü†' : 'üü°');
        const lateFee = parseFloat(payment.fee || '0');
        
        message += `${statusIcon} **${index + 1}. Kho·∫£n thanh to√°n #${payment.id}**\n`;
        message += `   üÜî **Payment ID: ${payment.id}**\n`;
        message += `   üí∞ S·ªë ti·ªÅn: ${formatVND(parseFloat(payment.amount))}\n`;
        message += `   üí≥ T·ªëi thi·ªÉu: ${formatVND(parseFloat(payment.minimumAmount))}\n`;
        if (lateFee > 0) {
          message += `   üö´ Ph√≠ ph·∫°t: ${formatVND(lateFee)}\n`;
        }
        message += `   üìÖ H·∫°n thanh to√°n: ${payment.dueDate}\n`;
        if (isOverdue) {
          message += `   ‚ö†Ô∏è Qu√° h·∫°n: ${Math.abs(daysUntilDue)} ng√†y\n`;
        } else {
          message += `   ‚è≥ C√≤n l·∫°i: ${daysUntilDue} ng√†y\n`;
        }
        message += `   ‚ñ∂Ô∏è **L·ªánh:** \`$tt ${payment.id} <s·ªë_ti·ªÅn>\`\n\n`;
      });

      message += 'üí° **H∆∞·ªõng d·∫´n:**\n';
      message += '- Copy ch√≠nh x√°c Payment ID ƒë·ªÉ thanh to√°n\n';
      message += '- C√≥ th·ªÉ thanh to√°n t·ªëi thi·ªÉu ho·∫∑c to√†n b·ªô\n';
      message += '- Thanh to√°n qu√° h·∫°n s·∫Ω c√≥ th√™m ph√≠ ph·∫°t';

      await this.sendMessage(data, message);

    } catch (error) {
      this.logger.error('Error getting all payments:', error);
      await this.sendMessage(data, '‚ùå L·ªói khi l·∫•y danh s√°ch thanh to√°n.');
    }
  }

  /**
   * L·∫•y l·ªãch s·ª≠ thanh to√°n c·ªßa user
   */
  async getPaymentHistory(data: ChannelMessage): Promise<void> {
    try {
      const userId = data.sender_id;
      
      const payments = await this.paymentsRepository.find({
        where: { userId },
        relations: ['loan'],
        order: { dueDate: 'DESC' },
        take: 20, // L·∫•y 20 kho·∫£n thanh to√°n g·∫ßn nh·∫•t
      });

      if (!payments.length) {
        await this.sendMessage(data, 'üìã **L·ªãch s·ª≠ thanh to√°n**\n\n‚ùå B·∫°n ch∆∞a c√≥ kho·∫£n thanh to√°n n√†o.');
        return;
      }

      const historyMessage = this.formatPaymentHistory(payments);
      await this.sendMessage(data, historyMessage);

    } catch (error) {
      this.logger.error('Error getting payment history:', error);
      await this.sendMessage(data, '‚ùå L·ªói khi l·∫•y l·ªãch s·ª≠ thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  }

  /**
   * Ki·ªÉm tra c√°c kho·∫£n thanh to√°n s·∫Øp ƒë·∫øn h·∫°n
   */
  async checkUpcomingPayments(data: ChannelMessage): Promise<void> {
    try {
      const userId = data.sender_id;
      const today = new Date();
      const nextWeek = new Date();
      nextWeek.setDate(today.getDate() + 7);

      const upcomingPayments = await this.paymentsRepository.find({
        where: {
          userId,
          status: PaymentStatus.PENDING,
          dueDate: LessThan(nextWeek.toISOString().split('T')[0]),
        },
        relations: ['loan'],
        order: { dueDate: 'ASC' },
      });

      if (!upcomingPayments.length) {
        await this.sendMessage(data, '‚úÖ **Thanh to√°n s·∫Øp t·ªõi**\n\nB·∫°n kh√¥ng c√≥ kho·∫£n thanh to√°n n√†o s·∫Øp ƒë·∫øn h·∫°n trong 7 ng√†y t·ªõi.');
        return;
      }

      const message = this.formatUpcomingPayments(upcomingPayments);
      await this.sendMessage(data, message);

    } catch (error) {
      this.logger.error('Error checking upcoming payments:', error);
      await this.sendMessage(data, '‚ùå L·ªói khi ki·ªÉm tra thanh to√°n s·∫Øp t·ªõi.');
    }
  }

  /**
   * Ki·ªÉm tra c√°c kho·∫£n thanh to√°n qu√° h·∫°n
   */
  async checkOverduePayments(userId?: string): Promise<Payments[]> {
    try {
      const today = new Date().toISOString().split('T')[0];
      
      const whereCondition: any = {
        status: PaymentStatus.PENDING,
        dueDate: LessThan(today),
      };

      if (userId) {
        whereCondition.userId = userId;
      }

      const overduePayments = await this.paymentsRepository.find({
        where: whereCondition,
        relations: ['loan', 'user'],
        order: { dueDate: 'ASC' },
      });

      return overduePayments;
    } catch (error) {
      this.logger.error('Error checking overdue payments:', error);
      return [];
    }
  }

  /**
   * T√≠nh to√°n ti·ªÅn ph·∫°t cho thanh to√°n tr·ªÖ
   */
  calculateLateFee(payment: Payments): number {
    const today = new Date();
    const dueDate = new Date(payment.dueDate);
    const daysLate = Math.floor((today.getTime() - dueDate.getTime()) / (1000 * 60 * 60 * 24));

    if (daysLate <= 0) return 0;

    const paymentAmount = parseFloat(payment.amount);
    let lateFeeRate = 0;

    // T√≠nh ph√≠ ph·∫°t theo ng√†y tr·ªÖ
    if (daysLate <= 7) {
      lateFeeRate = 0.005; // 0.5%/ng√†y cho 7 ng√†y ƒë·∫ßu
    } else if (daysLate <= 30) {
      lateFeeRate = 0.01; // 1%/ng√†y t·ª´ ng√†y 8-30
    } else {
      lateFeeRate = 0.015; // 1.5%/ng√†y sau 30 ng√†y
    }

    const lateFee = paymentAmount * lateFeeRate * daysLate;
    return Math.round(lateFee);
  }

  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i qu√° h·∫°n v√† t√≠nh ph√≠ ph·∫°t
   */
  async updateOverduePayments(): Promise<void> {
    try {
      const overduePayments = await this.checkOverduePayments();

      for (const payment of overduePayments) {
        const lateFee = this.calculateLateFee(payment);
        
        // C·∫≠p nh·∫≠t payment v·ªõi tr·∫°ng th√°i overdue v√† ph√≠ ph·∫°t
        await this.paymentsRepository.update(payment.id, {
          status: PaymentStatus.OVERDUE,
          fee: lateFee.toString(),
        });

        // C·∫≠p nh·∫≠t loan status n·∫øu c·∫ßn
        await this.loansRepository.update(payment.loanId, {
          status: LoanStatus.OVERDUE,
        });

        this.logger.log(`Updated overdue payment ${payment.id} with late fee: ${lateFee}`);
      }
    } catch (error) {
      this.logger.error('Error updating overdue payments:', error);
    }
  }

  /**
   * X·ª≠ l√Ω thanh to√°n kho·∫£n vay
   */
  async processPayment(data: ChannelMessage, paymentId: string, amount: number): Promise<void> {
    try {
      const userId = data.sender_id;
      
      // Ki·ªÉm tra payment c√≥ t·ªìn t·∫°i kh√¥ng
      const payment = await this.paymentsRepository.findOne({
        where: { id: paymentId, userId },
        relations: ['loan'],
      });

      if (!payment) {
        await this.sendMessage(data, '‚ùå Kh√¥ng t√¨m th·∫•y kho·∫£n thanh to√°n n√†y.');
        return;
      }

      if (payment.status === PaymentStatus.PAID) {
        await this.sendMessage(data, '‚úÖ Kho·∫£n thanh to√°n n√†y ƒë√£ ƒë∆∞·ª£c thanh to√°n r·ªìi.');
        return;
      }

      // Ki·ªÉm tra s·ªë d∆∞ ng∆∞·ªùi d√πng
      const user = await this.usersRepository.findOne({ where: { userId } });
      if (!user || parseFloat(user.balance) < amount) {
        await this.sendMessage(data, '‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán thanh to√°n.');
        return;
      }

      const paymentAmount = parseFloat(payment.amount);
      const minimumAmount = parseFloat(payment.minimumAmount);
      const lateFee = parseFloat(payment.fee || '0');
      const totalRequired = paymentAmount + lateFee;

      // Ki·ªÉm tra s·ªë ti·ªÅn thanh to√°n v·ªõi th√¥ng tin chi ti·∫øt
      if (amount < minimumAmount) {
        await this.sendMessage(data, 
          `‚ùå **S·ªë ti·ªÅn thanh to√°n kh√¥ng ƒë·ªß**\n\n` +
          `üí∞ **Th√¥ng tin thanh to√°n:**\n` +
          `‚Ä¢ B·∫°n thanh to√°n: ${formatVND(amount)}\n` +
          `‚Ä¢ T·ªëi thi·ªÉu c·∫ßn tr·∫£: ${formatVND(minimumAmount)}\n` +
          `‚Ä¢ To√†n b·ªô kho·∫£n n√†y: ${formatVND(totalRequired)}\n` +
          `${lateFee > 0 ? `‚Ä¢ Ph√≠ ph·∫°t: ${formatVND(lateFee)}\n` : ''}` +
          `\nüí° **L·ªánh ƒë√∫ng:**\n` +
          `‚Ä¢ Tr·∫£ t·ªëi thi·ªÉu: \`$tt ${payment.id} ${minimumAmount}\`\n` +
          `‚Ä¢ Tr·∫£ to√†n b·ªô: \`$tt ${payment.id} ${totalRequired}\``
        );
        return;
      }

      // C·∫£nh b√°o n·∫øu thanh to√°n √≠t h∆°n to√†n b·ªô
      if (amount >= minimumAmount && amount < totalRequired) {
        await this.sendMessage(data,
          `‚ö†Ô∏è **C·∫£nh b√°o: Thanh to√°n kh√¥ng ƒë·∫ßy ƒë·ªß**\n\n` +
          `üí∞ B·∫°n ƒëang thanh to√°n: ${formatVND(amount)}\n` +
          `üí≥ To√†n b·ªô kho·∫£n n√†y: ${formatVND(totalRequired)}\n` +
          `üí∏ C√≤n thi·∫øu: ${formatVND(totalRequired - amount)}\n\n` +
          `üîÑ Thanh to√°n s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω, nh∆∞ng b·∫°n v·∫´n c√≤n n·ª£ ph·∫ßn c√≤n l·∫°i.`
        );
      }

      // Th·ª±c hi·ªán thanh to√°n
      await this.executePayment(payment, user, amount, data);

    } catch (error) {
      this.logger.error('Error processing payment:', error);
      await this.sendMessage(data, '‚ùå L·ªói khi x·ª≠ l√Ω thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  }

  /**
   * Th·ª±c thi thanh to√°n
   */
  private async executePayment(
    payment: Payments, 
    user: Users, 
    amount: number,
    data: ChannelMessage
  ): Promise<void> {
    // S·ª≠ d·ª•ng database transaction ƒë·ªÉ ƒë·∫£m b·∫£o atomicity
    await this.dataSource.transaction(async manager => {
      const paymentAmount = parseFloat(payment.amount);
      const lateFee = parseFloat(payment.fee || '0');
      const totalRequired = paymentAmount + lateFee;

      // T·∫°o transaction
      const transaction = await manager.save(Transactions, {
        transactionId: `PAY_${Date.now()}_${payment.id}`,
        userId: user.userId,
        loanId: payment.loanId,
        paymentId: payment.id,
        amount: amount.toString(),
        type: TransactionType.PAYMENT,
        status: 'completed',
      });

      // C·∫≠p nh·∫≠t s·ªë d∆∞ user (tr·ª´ ti·ªÅn t·ª´ user)
      const oldBalance = parseFloat(user.balance);
      const newBalance = oldBalance - amount;
      
      this.logger.log(`Processing payment: User ${user.userId}, Old balance: ${oldBalance}, Amount: ${amount}, New balance: ${newBalance}`);
      
      await manager.update(Users, user.userId, {
        balance: newBalance.toString(),
      });

      // Chuy·ªÉn ti·ªÅn v√†o balance c·ªßa bot/admin (ADMIN_IDS[0])
      await this.transferToBotWithManager(amount, manager);

      // X√°c ƒë·ªãnh tr·∫°ng th√°i thanh to√°n
      let newStatus: PaymentStatus;
      if (amount >= totalRequired) {
        newStatus = PaymentStatus.PAID;
      } else if (amount >= parseFloat(payment.minimumAmount)) {
        newStatus = PaymentStatus.MINIMUM_PAID;
      } else {
        newStatus = PaymentStatus.PENDING;
      }

      // C·∫≠p nh·∫≠t payment
      await manager.update(Payments, payment.id, {
        status: newStatus,
        paidDate: new Date().toISOString().split('T')[0],
      });

      // Ki·ªÉm tra xem loan ƒë√£ ho√†n th√†nh ch∆∞a
      await this.checkLoanCompletionWithManager(payment.loanId, manager);

      this.logger.log(`Payment ${payment.id} processed successfully. Status: ${newStatus}`);
    });

    // G·ª≠i th√¥ng b√°o th√†nh c√¥ng (ngo√†i transaction)
    const newStatus = amount >= parseFloat(payment.amount) + parseFloat(payment.fee || '0') 
      ? PaymentStatus.PAID 
      : PaymentStatus.MINIMUM_PAID;
    const message = this.formatPaymentSuccessMessage(payment, amount, newStatus, `PAY_${Date.now()}_${payment.id}`);
    await this.sendMessage(data, message);
  }

  /**
   * Ki·ªÉm tra xem loan ƒë√£ ho√†n th√†nh ch∆∞a
   */
  private async checkLoanCompletion(loanId: string): Promise<void> {
    const pendingPayments = await this.paymentsRepository.count({
      where: {
        loanId,
        status: PaymentStatus.PENDING,
      },
    });

    if (pendingPayments === 0) {
      await this.loansRepository.update(loanId, {
        status: LoanStatus.REPAID,
      });
      this.logger.log(`Loan ${loanId} completed - all payments made`);
    }
  }

  /**
   * Format payment history message
   */
  private formatPaymentHistory(payments: Payments[]): string {
    let message = 'üìã **L·ªãch s·ª≠ thanh to√°n**\n\n';
    
    payments.forEach((payment, index) => {
      const statusIcon = this.getPaymentStatusIcon(payment.status);
      const lateFee = parseFloat(payment.fee || '0');
      
      message += `${index + 1}. ${statusIcon} **Kho·∫£n thanh to√°n #${payment.id}**\n`;
      message += `   üí∞ S·ªë ti·ªÅn: ${formatVND(parseFloat(payment.amount))}\n`;
      if (lateFee > 0) {
        message += `   üö´ Ph√≠ ph·∫°t: ${formatVND(lateFee)}\n`;
      }
      message += `   üìÖ H·∫°n thanh to√°n: ${payment.dueDate}\n`;
      if (payment.paidDate) {
        message += `   ‚úÖ Ng√†y thanh to√°n: ${payment.paidDate}\n`;
      }
      message += `   üìä Tr·∫°ng th√°i: ${this.getPaymentStatusText(payment.status)}\n\n`;
    });

    return message;
  }

  /**
   * Format upcoming payments message
   */
  private formatUpcomingPayments(payments: Payments[]): string {
    let message = '‚è∞ **Thanh to√°n s·∫Øp t·ªõi**\n\n';
    
    payments.forEach((payment, index) => {
      const daysUntilDue = this.getDaysUntilDue(payment.dueDate);
      const urgencyIcon = daysUntilDue <= 3 ? 'üî¥' : daysUntilDue <= 7 ? 'üü°' : 'üü¢';
      
      message += `${urgencyIcon} **Kho·∫£n thanh to√°n #${payment.id}**\n`;
      message += `   üÜî **Payment ID: ${payment.id}**\n`;
      message += `   üí∞ S·ªë ti·ªÅn: ${formatVND(parseFloat(payment.amount))}\n`;
      message += `   üí≥ T·ªëi thi·ªÉu: ${formatVND(parseFloat(payment.minimumAmount))}\n`;
      message += `   üìÖ H·∫°n thanh to√°n: ${payment.dueDate}\n`;
      message += `   ‚è≥ C√≤n l·∫°i: ${daysUntilDue} ng√†y\n`;
      message += `   ‚ñ∂Ô∏è **L·ªánh thanh to√°n:** \`$tt ${payment.id} <s·ªë_ti·ªÅn>\`\n\n`;
    });

    message += 'üí° **G·ª£i √Ω:** Copy ch√≠nh x√°c Payment ID t·ª´ danh s√°ch tr√™n ƒë·ªÉ thanh to√°n';
    
    return message;
  }

  /**
   * Format payment success message
   */
  private formatPaymentSuccessMessage(
    payment: Payments, 
    amount: number, 
    status: PaymentStatus,
    transactionId: string
  ): string {
    let message = '‚úÖ **Thanh to√°n th√†nh c√¥ng!**\n\n';
    message += `üÜî M√£ giao d·ªãch: ${transactionId}\n`;
    message += `üí∞ S·ªë ti·ªÅn ƒë√£ thanh to√°n: ${formatVND(amount)}\n`;
    message += `üìã Kho·∫£n thanh to√°n: #${payment.id}\n`;
    message += `üìä Tr·∫°ng th√°i: ${this.getPaymentStatusText(status)}\n\n`;
    
    if (status === PaymentStatus.MINIMUM_PAID) {
      const remaining = parseFloat(payment.amount) - amount;
      message += `‚ö†Ô∏è B·∫°n ƒë√£ thanh to√°n t·ªëi thi·ªÉu. C√≤n l·∫°i: ${formatVND(remaining)}`;
    } else if (status === PaymentStatus.PAID) {
      message += 'üéâ Kho·∫£n thanh to√°n ƒë√£ ƒë∆∞·ª£c ho√†n th√†nh!';
    }
    
    return message;
  }

  /**
   * Utility methods
   */
  private getPaymentStatusIcon(status: PaymentStatus): string {
    switch (status) {
      case PaymentStatus.PAID: return '‚úÖ';
      case PaymentStatus.MINIMUM_PAID: return 'üü°';
      case PaymentStatus.OVERDUE: return 'üî¥';
      case PaymentStatus.PENDING: return '‚è≥';
      default: return '‚ùì';
    }
  }

  private getPaymentStatusText(status: PaymentStatus): string {
    switch (status) {
      case PaymentStatus.PAID: return 'ƒê√£ thanh to√°n';
      case PaymentStatus.MINIMUM_PAID: return 'Thanh to√°n t·ªëi thi·ªÉu';
      case PaymentStatus.OVERDUE: return 'Qu√° h·∫°n';
      case PaymentStatus.PENDING: return 'Ch·ªù thanh to√°n';
      default: return 'Kh√¥ng x√°c ƒë·ªãnh';
    }
  }

  private getDaysUntilDue(dueDate: string): number {
    const today = new Date();
    const due = new Date(dueDate);
    const diffTime = due.getTime() - today.getTime();
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  }

  private async sendMessage(data: ChannelMessage, content: string): Promise<void> {
    await this.mezonService.sendMessage({
      type: EMessageType.CHANNEL,
      reply_to_message_id: data.message_id,
      payload: {
        channel_id: data.channel_id!,
        message: {
          type: EMessagePayloadType.SYSTEM,
          content,
        },
      },
    });
  }

  /**
   * Chuy·ªÉn ti·ªÅn v√†o balance c·ªßa bot (admin ƒë·∫ßu ti√™n) v·ªõi transaction manager
   */
  private async transferToBotWithManager(amount: number, manager: any): Promise<void> {
    try {
      const botUserId = ADMIN_IDS[0]; // S·ª≠ d·ª•ng admin ƒë·∫ßu ti√™n l√†m bot account
      
      // Ki·ªÉm tra xem bot user c√≥ t·ªìn t·∫°i kh√¥ng
      const botUser = await manager.findOne(Users, { where: { userId: botUserId } });
      
      if (botUser) {
        // C·ªông ti·ªÅn v√†o balance c·ªßa bot
        const newBotBalance = parseFloat(botUser.balance) + amount;
        await manager.update(Users, botUserId, {
          balance: newBotBalance.toString(),
        });
        
        this.logger.log(`Transferred ${amount} to bot account ${botUserId}. New balance: ${newBotBalance}`);
      } else {
        // N·∫øu bot user ch∆∞a t·ªìn t·∫°i, t·∫°o t√†i kho·∫£n bot
        await manager.save(Users, {
          userId: botUserId,
          username: 'CreditBot',
          balance: amount.toString(),
          creditScore: 1000, // Bot c√≥ ƒëi·ªÉm t√≠n d·ª•ng cao
        });
        
        this.logger.log(`Created bot account ${botUserId} with balance: ${amount}`);
      }
    } catch (error) {
      this.logger.error('Error transferring to bot:', error);
      throw error; // Re-throw ƒë·ªÉ transaction rollback
    }
  }

  /**
   * Ki·ªÉm tra xem loan ƒë√£ ho√†n th√†nh ch∆∞a v·ªõi transaction manager
   */
  private async checkLoanCompletionWithManager(loanId: string, manager: any): Promise<void> {
    const pendingPayments = await manager.count(Payments, {
      where: {
        loanId,
        status: PaymentStatus.PENDING,
      },
    });

    if (pendingPayments === 0) {
      await manager.update(Loans, loanId, {
        status: LoanStatus.REPAID,
      });
      this.logger.log(`Loan ${loanId} completed - all payments made`);
    }
  }

  /**
   * Chuy·ªÉn ti·ªÅn v√†o balance c·ªßa bot (admin ƒë·∫ßu ti√™n)
   */
  private async transferToBot(amount: number): Promise<void> {
    try {
      const botUserId = ADMIN_IDS[0]; // S·ª≠ d·ª•ng admin ƒë·∫ßu ti√™n l√†m bot account

      // Ki·ªÉm tra xem bot user c√≥ t·ªìn t·∫°i kh√¥ng
      const botUser = await this.usersRepository.findOne({ where: { userId: botUserId } });

      if (botUser) {
        // C·ªông ti·ªÅn v√†o balance c·ªßa bot
        const newBotBalance = parseFloat(botUser.balance) + amount;
        await this.usersRepository.update(botUserId, {
          balance: newBotBalance.toString(),
        });

        this.logger.log(`Transferred ${amount} to bot account ${botUserId}. New balance: ${newBotBalance}`);
      } else {
        // N·∫øu bot user ch∆∞a t·ªìn t·∫°i, t·∫°o t√†i kho·∫£n bot
        await this.usersRepository.save(
          this.usersRepository.create({
            userId: botUserId,
            username: 'CreditBot',
            balance: amount.toString(),
            creditScore: 1000, // Bot c√≥ ƒëi·ªÉm t√≠n d·ª•ng cao
          })
        );

        this.logger.log(`Created bot account ${botUserId} with balance: ${amount}`);
      }
    } catch (error) {
      this.logger.error('Error transferring to bot:', error);
    }
  }
}
