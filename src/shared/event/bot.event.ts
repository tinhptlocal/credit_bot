import { Injectable } from '@nestjs/common';
import { OnEvent } from '@nestjs/event-emitter';
import { ChannelMessage, Events, TokenSentEvent } from 'mezon-sdk';
import {
  ADD_ADMIN,
  ADMIN_APPROVE,
  ADMIN_CREDIT,
  ADMIN_FIND,
  ADMIN_GENERATE_PAYMENTS,
  ADMIN_KICK,
  ADMIN_LOANS,
  ADMIN_PREFIX,
  ADMIN_REJECT,
  ADMIN_STATS,
  ADMIN_USERS,
  ADMIN_WARN,
  ADMIN_WITHDRAW,
  ADMIN_BALANCE,
  CHECK_BALANCE_MESSAGE,
  CHECK_LOAN_ACTICE,
  HELP,
  LOANS,
  LOANS_CHECK,
  LOANS_LIST,
  OPTION_LOAN_TERMS,
  PAYMENT_CHECK_SCHEDULE,
  PAYMENT_CONFIRM,
  PAYMENT_EARLY,
  PAYMENT_HISTORY,
  PAYMENT_LIST,
  PAYMENT_OVERDUE,
  PAYMENT_PAY,
  PAYMENT_UPCOMING,
  STARTED_MESSAGE,
  STARTED_MESSAGE_WITH_BOT_NAME,
  WITH_DRAW,
} from 'src/constant';
import { formatVND } from 'src/shared/helper';
import { AdminService } from 'src/modules/admin/admin.service';
import { LoanService } from 'src/modules/loan/loan.service';
import { PaymentService } from 'src/modules/payment/payment.service';
import { TransactionService } from 'src/modules/transaction/transaction.service';
import { UserService } from 'src/modules/user/user.service';
import { MezonService } from '../mezon/mezon.service';
import {
  EMessagePayloadType,
  EMessageType,
  MessageButtonClickedEvent,
} from '../mezon/types/mezon.type';

@Injectable()
export class BotEvent {
  constructor(
    private readonly userService: UserService,
    private readonly transactionService: TransactionService,
    private readonly mezonService: MezonService,
    private readonly loanService: LoanService,
    private readonly adminService: AdminService,
    private readonly paymentService: PaymentService,
  ) {}

  @OnEvent(Events.TokenSend)
  async handleTokenSentEvent(data: TokenSentEvent) {
    await this.transactionService.createToken(data);
  }

  @OnEvent(Events.ChannelMessage)
  async handleChannelMessageEvent(data: ChannelMessage) {
    const message = data.content.t;
    if (message === STARTED_MESSAGE_WITH_BOT_NAME) {
      await this.userService.introduce(data);
    } else if (message === `${STARTED_MESSAGE}${CHECK_BALANCE_MESSAGE}`) {
      await this.userService.checkBalance(data);
    } else if (message?.startsWith(`${STARTED_MESSAGE}${WITH_DRAW}`)) {
      const numberInString = message.match(/\d+/);
      if (numberInString) {
        await this.userService.withDraw(data, String(numberInString[0]));
      }
    } else if (data.content.t?.startsWith(`${STARTED_MESSAGE}${LOANS}`)) {
      await this.handleCreateLoans(data);
    } else if (data.content.t === `${STARTED_MESSAGE}${LOANS_CHECK}`) {
      await this.loanService.getLoanStatus(data);
    } else if (data.content.t === `${STARTED_MESSAGE}${LOANS_LIST}`) {
      await this.loanService.getLoanActive(data);
    } else if (message?.startsWith(ADMIN_PREFIX)) {
      await this.handleAdminCommands(data);
    } else if (message === `${STARTED_MESSAGE}${CHECK_LOAN_ACTICE}`) {
      await this.loanService.getLoanActive(data);
    } else if (
      message?.startsWith(`${STARTED_MESSAGE}${PAYMENT_CHECK_SCHEDULE}`)
    ) {
      const parts = message.split(' ');
      const username = parts[1];
      await this.loanService.getPaymentSchedule(data, username);
    } else if (data.content.t === `${STARTED_MESSAGE}${PAYMENT_HISTORY}`) {
      await this.paymentService.getPaymentHistory(data);
    } else if (data.content.t === `${STARTED_MESSAGE}${PAYMENT_UPCOMING}`) {
      await this.paymentService.checkUpcomingPayments(data);
    } else if (data.content.t === `${STARTED_MESSAGE}${PAYMENT_LIST}`) {
      await this.paymentService.getAllPayments(data);
    } else if (
      data.content.t?.startsWith(`${STARTED_MESSAGE}${PAYMENT_EARLY}`)
    ) {
      await this.handleEarlyPaymentCommand(data);
    } else if (data.content.t === `${STARTED_MESSAGE}${PAYMENT_OVERDUE}`) {
      await this.handleOverduePaymentsCheck(data);
    } else if (
      data.content.t?.startsWith(`${STARTED_MESSAGE}${PAYMENT_CONFIRM}`)
    ) {
      await this.handleConfirmEarlyPayment(data);
    } else if (data.content.t?.startsWith(`${STARTED_MESSAGE}${PAYMENT_PAY}`)) {
      await this.handlePaymentCommand(data);
    } else if (data.content.t?.startsWith(`${STARTED_MESSAGE}${HELP}`)) {
      await this.handleHelpCommand(data);
    }
  }

  @OnEvent(Events.MessageButtonClicked)
  async handleMessageButtonClickedEvent(data: MessageButtonClickedEvent) {
    await this.loanService.handleCLickButton(data);
  }

  async handleHelpCommand(data: ChannelMessage) {
    if (!data.content.t) return;

    await this.showUserHelp(data);
  }

  private async showUserHelp(data: ChannelMessage) {
    const message =
      `ü§ñ **H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG CREDIT BOT**\n\n` +
      `üìã **L·ªÜNH C∆† B·∫¢N:**\n` +
      `‚Ä¢ \`$start\` - ƒêƒÉng k√Ω t√†i kho·∫£n\n` +
      `‚Ä¢ \`$kttk\` - Ki·ªÉm tra s·ªë d∆∞\n` +
      `‚Ä¢ \`$rut <s·ªë_ti·ªÅn>\` - R√∫t ti·ªÅn\n\n` +
      `üí∞ **QU·∫¢N L√ù KHO·∫¢N VAY:**\n` +
      `‚Ä¢ \`$vay <s·ªë_ti·ªÅn> <s·ªë_th√°ng>\` - ƒêƒÉng k√Ω vay ti·ªÅn\n` +
      `‚Ä¢ \`$ktvay\` - Ki·ªÉm tra tr·∫°ng th√°i kho·∫£n vay\n` +
      `‚Ä¢ \`$dsvay\` - Xem danh s√°ch kho·∫£n vay ƒëang ho·∫°t ƒë·ªông\n\n` +
      `üí≥ **THANH TO√ÅN:**\n` +
      `‚Ä¢ \`$lstt\` - Xem l·ªãch s·ª≠ thanh to√°n\n` +
      `‚Ä¢ \`$ttst\` - Xem thanh to√°n s·∫Øp t·ªõi\n` +
      `‚Ä¢ \`$tt <payment_id> <s·ªë_ti·ªÅn>\` - Th·ª±c hi·ªán thanh to√°n\n` +
      `‚Ä¢ \`$ttqh\` - Xem thanh to√°n qu√° h·∫°n\n` +
      `‚Ä¢ \`$dstt\` - Xem t·∫•t c·∫£ thanh to√°n\n\n` +
      `‚ö° **THANH TO√ÅN TR∆Ø·ªöC H·∫†N:**\n` +
      `‚Ä¢ \`$tth <loan_id>\` - T√≠nh to√°n thanh to√°n tr∆∞·ªõc h·∫°n\n` +
      `‚Ä¢ \`$xntt <loan_id>\` - X√°c nh·∫≠n thanh to√°n tr∆∞·ªõc h·∫°n\n\n` +
      `üìù **V√ç D·ª§:**\n` +
      `‚Ä¢ \`$vay 5000000 6\` - Vay 5 tri·ªáu trong 6 th√°ng\n` +
      `‚Ä¢ \`$tt 12345 500000\` - Thanh to√°n 500k cho payment ID 12345\n` +
      `‚Ä¢ \`$tth 67890\` - Thanh to√°n tr∆∞·ªõc h·∫°n loan ID 67890\n\n` +
      `üí° **L∆ØU √ù:**\n` +
      `‚Ä¢ K·ª≥ h·∫°n vay h·ªó tr·ª£: 3, 6, 9, 12 th√°ng\n` +
      `‚Ä¢ Thanh to√°n tr∆∞·ªõc h·∫°n s·∫Ω ti·∫øt ki·ªám l√£i su·∫•t\n` +
      `‚Ä¢ Copy ch√≠nh x√°c Payment ID t·ª´ danh s√°ch ƒë·ªÉ thanh to√°n\n\n` +
      `üîß **ADMIN:** G√µ \`$admin\` ƒë·ªÉ xem c√°c l·ªánh qu·∫£n tr·ªã`;

    await this.mezonService.sendMessage({
      type: EMessageType.CHANNEL,
      reply_to_message_id: data.message_id,
      payload: {
        channel_id: data.channel_id,
        message: {
          type: EMessagePayloadType.SYSTEM,
          content: message,
        },
      },
    });
  }

  async handleConfirmEarlyPayment(data: ChannelMessage) {
    if (!data.content.t) return;
    const params = data.content.t.split(' ');

    if (params.length !== 2) {
      await this.mezonService.sendMessage({
        type: EMessageType.CHANNEL,
        reply_to_message_id: data.message_id,
        payload: {
          channel_id: data.channel_id,
          message: {
            type: EMessagePayloadType.SYSTEM,
            content: '‚ùå C√∫ ph√°p kh√¥ng ƒë√∫ng. Vui l√≤ng s·ª≠ d·ª•ng: $xntt <loan_id>',
          },
        },
      });
      return;
    }

    const loanId = params[1];
    await this.paymentService.confirmEarlyPayment(data, loanId);
  }

  async handlePaymentCommand(data: ChannelMessage) {
    if (!data.content.t) return;
    const params = data.content.t.split(' ');

    if (params.length !== 3) {
      await this.mezonService.sendMessage({
        type: EMessageType.CHANNEL,
        reply_to_message_id: data.message_id,
        payload: {
          channel_id: data.channel_id,
          message: {
            type: EMessagePayloadType.SYSTEM,
            content:
              '‚ùå C√∫ ph√°p kh√¥ng ƒë√∫ng. Vui l√≤ng s·ª≠ d·ª•ng: $tt <payment_id> <s·ªë_ti·ªÅn>',
          },
        },
      });
      return;
    }

    const paymentId = params[1];
    const amount = parseInt(params[2]);

    if (isNaN(amount) || amount <= 0) {
      await this.mezonService.sendMessage({
        type: EMessageType.CHANNEL,
        reply_to_message_id: data.message_id,
        payload: {
          channel_id: data.channel_id,
          message: {
            type: EMessagePayloadType.SYSTEM,
            content: '‚ùå S·ªë ti·ªÅn thanh to√°n kh√¥ng h·ª£p l·ªá.',
          },
        },
      });
      return;
    }

    await this.paymentService.processPayment(data, paymentId, amount);
  }

  async handleEarlyPaymentCommand(data: ChannelMessage) {
    if (!data.content.t) return;
    const params = data.content.t.split(' ');

    if (params.length !== 2) {
      await this.mezonService.sendMessage({
        type: EMessageType.CHANNEL,
        reply_to_message_id: data.message_id,
        payload: {
          channel_id: data.channel_id,
          message: {
            type: EMessagePayloadType.SYSTEM,
            content: '‚ùå C√∫ ph√°p kh√¥ng ƒë√∫ng. Vui l√≤ng s·ª≠ d·ª•ng: $tth <loan_id>',
          },
        },
      });
      return;
    }

    const loanId = params[1];
    await this.paymentService.payEarlyFullLoan(data, loanId);
  }

  async handleOverduePaymentsCheck(data: ChannelMessage) {
    const userId = data.sender_id;
    const overduePayments =
      await this.paymentService.checkOverduePayments(userId);

    if (!overduePayments.length) {
      await this.mezonService.sendMessage({
        type: EMessageType.CHANNEL,
        reply_to_message_id: data.message_id,
        payload: {
          channel_id: data.channel_id,
          message: {
            type: EMessagePayloadType.SYSTEM,
            content: '‚úÖ B·∫°n kh√¥ng c√≥ kho·∫£n thanh to√°n n√†o qu√° h·∫°n.',
          },
        },
      });
      return;
    }

    let message = 'üî¥ C√°c kho·∫£n thanh to√°n qu√° h·∫°n:\n\n';

    overduePayments.forEach((payment, index) => {
      const lateFee = parseFloat(payment.fee || '0');

      message += `${index + 1}. **Kho·∫£n thanh to√°n #${payment.id}**\n`;
      message += `üÜî **Payment ID: ${payment.id}**\n`;
      message += `üí∞ S·ªë ti·ªÅn: ${payment.amount} VND\n`;

      if (lateFee > 0) {
        message += `üö´ Ph√≠ ph·∫°t: ${lateFee} VND\n`;
      }

      message += `üìÖ H·∫°n thanh to√°n: ${payment.dueDate}\n`;
      message += `‚ñ∂Ô∏è **L·ªánh thanh to√°n: $tt ${payment.id} <s·ªë_ti·ªÅn>**\n\n`;
    });

    message +=
      'üí° **G·ª£i √Ω:** Copy ch√≠nh x√°c Payment ID t·ª´ danh s√°ch tr√™n ƒë·ªÉ thanh to√°n ngay';

    await this.mezonService.sendMessage({
      type: EMessageType.CHANNEL,
      reply_to_message_id: data.message_id,
      payload: {
        channel_id: data.channel_id,
        message: {
          type: EMessagePayloadType.SYSTEM,
          content: message,
        },
      },
    });
  }

  async handleCreateLoans(data: ChannelMessage) {
    if (!data.content.t) return;
    const params = data.content.t.split(' ');

    if (params.length !== 3) {
      await this.mezonService.sendMessage({
        type: EMessageType.CHANNEL,
        payload: {
          channel_id: data.channel_id,
          message: {
            type: EMessagePayloadType.SYSTEM,
            content:
              '‚ùå C√∫ ph√°p kh√¥ng ƒë√∫ng. Vui l√≤ng s·ª≠ d·ª•ng: $vay <s·ªë_ti·ªÅn> <s·ªë_th√°ng>',
          },
        },
      });
      return;
    }

    const amount = parseInt(params[1]);
    const term = parseInt(params[2]);

    if (!OPTION_LOAN_TERMS.includes(term)) {
      await this.mezonService.sendMessage({
        type: EMessageType.CHANNEL,
        reply_to_message_id: data.message_id,
        payload: {
          channel_id: data.channel_id,
          message: {
            type: EMessagePayloadType.SYSTEM,
            content:
              '‚ùå Hi·ªán ch·ªâ c√≥ th·ªÉ vay v·ªõi c√°c k·ª≥ h·∫°n: 3, 6, 9, 12 th√°ng.',
          },
        },
      });
      return;
    }

    await this.loanService.requestLoan(data, amount, term);
  }

  private async handleAdminCommands(data: ChannelMessage) {
    const message = data.content.t;
    const adminId = data.sender_id;
    if (!message) {
      return;
    }
    if (await this.adminService.isAdmin(adminId)) {
      await this.userService.sendSystemMessage(
        data.channel_id,
        '‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh admin!',
        data.message_id,
      );
      return;
    }

    const parts = message.split(' ');
    const command = parts[1];

    try {
      switch (command) {
        case ADMIN_STATS:
          await this.handleStatsCommand(data);
          break;
        case ADMIN_LOANS:
          await this.handleLoansCommand(data);
          break;
        case ADMIN_USERS:
          await this.handleUsersCommand(data);
          break;
        case ADMIN_KICK:
          await this.handleKickCommand(data, parts);
          break;
        case ADMIN_WARN:
          await this.handleWarnCommand(data, parts);
          break;
        case ADMIN_APPROVE:
          await this.handleApproveCommand(data, parts);
          break;
        case ADMIN_REJECT:
          await this.handleRejectCommand(data, parts);
          break;
        case ADMIN_CREDIT:
          await this.handleCreditCommand(data, parts);
          break;
        case ADMIN_FIND:
          await this.handleFindCommand(data, parts);
          break;
        case ADMIN_GENERATE_PAYMENTS:
          await this.handleGeneratePaymentsCommand(data);
          break;
        case ADMIN_WITHDRAW:
          await this.handleAdminWithdrawCommand(data, parts);
          break;
        case ADMIN_BALANCE:
          await this.handleBotBalanceCommand(data);
        case ADD_ADMIN:
          await this.adminService.createAdmin(data);
          break;
        default:
          await this.showAdminHelp(data);
      }
    } catch (error) {
      await this.userService.sendSystemMessage(
        data.channel_id,
        `‚ùå L·ªói: ${error.message}`,
        data.message_id,
      );
    }
  }

  private async handleGeneratePaymentsCommand(data: ChannelMessage) {
    try {
      const result = await this.adminService.generateMissingPayments(
        data.sender_id,
      );
      const message =
        `üîß **T·∫°o Payments cho Loans ƒë√£ Approved**\n\n` +
        `‚úÖ ƒê√£ t·∫°o: ${result.created} payment schedules\n` +
        `‚ö†Ô∏è B·ªè qua: ${result.skipped} loans\n\n` +
        `üí° C√°c loans ƒë√£ approved s·∫Ω c√≥ payments ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông.`;

      await this.userService.sendSystemMessage(
        data.channel_id,
        message,
        data.message_id,
      );
    } catch (error) {
      await this.userService.sendSystemMessage(
        data.channel_id,
        `‚ùå L·ªói: ${error.message}`,
        data.message_id,
      );
    }
  }

  private async handleAdminWithdrawCommand(
    data: ChannelMessage,
    parts: string[],
  ) {
    if (parts.length < 3) {
      await this.userService.sendSystemMessage(
        data.channel_id,
        '‚ùå S·ª≠ d·ª•ng: $admin withdraw <s·ªë_ti·ªÅn>',
        data.message_id,
      );
      return;
    }

    const amount = parseInt(parts[2]);

    if (isNaN(amount) || amount <= 0) {
      await this.userService.sendSystemMessage(
        data.channel_id,
        '‚ùå S·ªë ti·ªÅn r√∫t kh√¥ng h·ª£p l·ªá.',
        data.message_id,
      );
      return;
    }

    try {
      const result = await this.adminService.withdrawFromAdmin(
        data.sender_id,
        amount,
      );
      const message =
        `üí∞ **Admin Withdraw**\n\n` +
        `‚úÖ ƒê√£ r√∫t: ${amount.toLocaleString()} VND\n` +
        `üí≥ S·ªë d∆∞ c√≤n l·∫°i: ${result.remainingBalance.toLocaleString()} VND\n` +
        `üìÑ Transaction ID: ${result.transactionId}`;

      await this.userService.sendSystemMessage(
        data.channel_id,
        message,
        data.message_id,
      );
    } catch (error) {
      await this.userService.sendSystemMessage(
        data.channel_id,
        `‚ùå L·ªói: ${error.message}`,
        data.message_id,
      );
    }
  }

  private async handleStatsCommand(data: ChannelMessage) {
    const stats = await this.adminService.getSystemStatistics();
    const message =
      `üìä Th·ªëng k√™ h·ªá th·ªëng:\n` +
      `üë• T·ªïng users: ${stats.totalUsers}\n` +
      `üí∞ T·ªïng kho·∫£n vay: ${stats.totalLoans}\n` +
      `‚è≥ Ch·ªù ph√™ duy·ªát: ${stats.pendingLoans}\n` +
      `‚úÖ ƒê√£ ph√™ duy·ªát: ${stats.approvedLoans}\n` +
      `‚ùå ƒê√£ t·ª´ ch·ªëi: ${stats.rejectedLoans}`;

    await this.userService.sendSystemMessage(
      data.channel_id,
      message,
      data.message_id,
    );
  }

  private async handleLoansCommand(data: ChannelMessage) {
    const loans = await this.adminService.getPendingLoans();
    if (loans.length === 0) {
      await this.userService.sendSystemMessage(
        data.channel_id,
        'üìã Kh√¥ng c√≥ kho·∫£n vay n√†o ch·ªù ph√™ duy·ªát',
        data.message_id,
      );
      return;
    }

    let message = 'üìã Kho·∫£n vay ch·ªù ph√™ duy·ªát:\n';
    loans.slice(0, 5).forEach((loan, index) => {
      message += `${index + 1}. ID: ${loan.id} | User: ${loan.user.username} (${loan.user.userId}) | S·ªë ti·ªÅn: ${loan.amount}\n`;
    });

    await this.userService.sendSystemMessage(
      data.channel_id,
      message,
      data.message_id,
    );
  }

  private async handleUsersCommand(data: ChannelMessage) {
    const users = await this.adminService.getAllUsers();
    const sortedUsers = users.sort(
      (a, b) => parseInt(b.balance) - parseInt(a.balance),
    );

    let message = `üë• T·ªïng s·ªë users: ${users.length}\n\n`;
    message += `üìä Danh s√°ch users:\n`;

    sortedUsers.forEach((user, index) => {
      const role = user.userRoles?.[0]?.role?.name || 'user';
      const roleIcon = role === 'admin' ? 'üëë' : 'üë§';
      const balance = parseInt(user.balance).toLocaleString('vi-VN');
      message += `${index + 1}. ${roleIcon} ${user.username}\n`;
      message += `   üí∞ S·ªë d∆∞: ${balance} VND\n`;
      message += `   ‚≠ê ƒêi·ªÉm t√≠n d·ª•ng: ${user.creditScore}\n`;
      message += `   üÜî ID: \`${user.userId}\`\n`;
      message += `   üè∑Ô∏è Role: ${role}\n\n`;
    });

    await this.userService.sendSystemMessage(
      data.channel_id,
      message,
      data.message_id,
    );
  }

  private async handleFindCommand(data: ChannelMessage, parts: string[]) {
    if (parts.length < 3) {
      await this.userService.sendSystemMessage(
        data.channel_id,
        '‚ùå S·ª≠ d·ª•ng: $admin find <t√™n_ho·∫∑c_id>',
        data.message_id,
      );
      return;
    }

    const searchTerm = parts.slice(2).join(' ');

    try {
      const users = await this.adminService.searchUsers(searchTerm);

      if (users.length === 0) {
        await this.userService.sendSystemMessage(
          data.channel_id,
          `‚ùå Kh√¥ng t√¨m th·∫•y user n√†o v·ªõi t·ª´ kh√≥a: "${searchTerm}"`,
          data.message_id,
        );
        return;
      }

      let message = `üîç K·∫øt qu·∫£ t√¨m ki·∫øm cho: "${searchTerm}"\n\n`;
      users.forEach((user, index) => {
        const role = user.userRoles?.[0]?.role?.name || 'user';
        const roleIcon = role === 'admin' ? 'üëë' : 'üë§';
        const balance = parseInt(user.balance).toLocaleString('vi-VN');
        message += `${index + 1}. ${roleIcon} ${user.username}\n`;
        message += `   üí∞ S·ªë d∆∞: ${balance} VND\n`;
        message += `   ‚≠ê ƒêi·ªÉm t√≠n d·ª•ng: ${user.creditScore}\n`;
        message += `   üÜî ID: \`${user.userId}\`\n`;
        message += `   üè∑Ô∏è Role: ${role}\n\n`;
      });

      await this.userService.sendSystemMessage(
        data.channel_id,
        message,
        data.message_id,
      );
    } catch (error) {
      await this.userService.sendSystemMessage(
        data.channel_id,
        `‚ùå L·ªói: ${error.message}`,
        data.message_id,
      );
    }
  }

  private async handleKickCommand(data: ChannelMessage, parts: string[]) {
    if (parts.length < 3) {
      await this.userService.sendSystemMessage(
        data.channel_id,
        '‚ùå S·ª≠ d·ª•ng: $admin kick <userName> [l√Ω do]',
        data.message_id,
      );
      return;
    }

    const userName = parts[2];
    const reason = parts.slice(3).join(' ');

    try {
      const user = await this.adminService.getUserByUsername(userName);
      if (!user) {
        await this.userService.sendSystemMessage(
          data.channel_id,
          `‚ùå user name ${userName} ch∆∞a c√≥ kho·∫£n vay ho·∫∑c kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng!`,
          data.message_id,
        );
        return;
      }

      const userId = user.id;

      await this.adminService.kickUser(
        userName,
        data.channel_id,
        data.sender_id,
        reason,
      );
      await this.userService.sendSystemMessage(
        data.channel_id,
        `üë¢ ƒê√£ kick user ${user.username} (${userId})${reason ? ` - L√Ω do: ${reason}` : ''}`,
        data.message_id,
      );
    } catch (error) {
      await this.userService.sendSystemMessage(
        data.channel_id,
        `‚ùå L·ªói: ${error.message}`,
        data.message_id,
      );
    }
  }

  private async handleWarnCommand(data: ChannelMessage, parts: string[]) {
    if (parts.length < 4) {
      await this.userService.sendSystemMessage(
        data.channel_id,
        '‚ùå S·ª≠ d·ª•ng: $admin warn <userName> <l√Ω do>',
        data.message_id,
      );
      return;
    }

    const userName = parts[2];
    const reason = parts.slice(3).join(' ');

    try {
      const user = await this.adminService.getUserByUsername(userName);
      if (!user) {
        await this.userService.sendSystemMessage(
          data.channel_id,
          `‚ùå user name ${userName} ch∆∞a c√≥ kho·∫£n vay ho·∫∑c kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng!`,
          data.message_id,
        );
        return;
      }

      const userId = user.id;

      await this.adminService.warnUser(
        userName,
        data.channel_id,
        data.sender_id,
        reason,
      );
      await this.userService.sendSystemMessage(
        data.channel_id,
        `‚ö†Ô∏è ƒê√£ c·∫£nh b√°o user ${user.username} (${userId}) - L√Ω do: ${reason}`,
        data.message_id,
      );
    } catch (error) {
      await this.userService.sendSystemMessage(
        data.channel_id,
        `‚ùå L·ªói: ${error.message}`,
        data.message_id,
      );
    }
  }

  private async handleApproveCommand(data: ChannelMessage, parts: string[]) {
    if (parts.length < 3) {
      await this.userService.sendSystemMessage(
        data.channel_id,
        '‚ùå S·ª≠ d·ª•ng: $admin approve <loan_id>',
        data.message_id,
      );
      return;
    }

    const loanId = parts[2];

    try {
      const loan = await this.adminService.getLoanById(loanId);
      if (!loan) {
        await this.userService.sendSystemMessage(
          data.channel_id,
          `‚ùå Kh√¥ng t√¨m th·∫•y kho·∫£n vay v·ªõi ID: ${loanId}`,
          data.message_id,
        );
        return;
      }

      await this.adminService.approveLoan(loanId, data.sender_id);
      await this.userService.sendSystemMessage(
        data.channel_id,
        `‚úÖ ƒê√£ ph√™ duy·ªát kho·∫£n vay ${loanId} c·ªßa user ${loan.user.username} (${loan.user.userId}) - S·ªë ti·ªÅn: ${loan.amount}`,
        data.message_id,
      );
    } catch (error) {
      await this.userService.sendSystemMessage(
        data.channel_id,
        `‚ùå L·ªói: ${error.message}`,
        data.message_id,
      );
    }
  }

  private async handleRejectCommand(data: ChannelMessage, parts: string[]) {
    if (parts.length < 3) {
      await this.userService.sendSystemMessage(
        data.channel_id,
        '‚ùå S·ª≠ d·ª•ng: $admin reject <loan_id> [l√Ω do]',
        data.message_id,
      );
      return;
    }

    const loanId = parts[2];
    const reason = parts.slice(3).join(' ');

    try {
      const loan = await this.adminService.getLoanById(loanId);
      if (!loan) {
        await this.userService.sendSystemMessage(
          data.channel_id,
          `‚ùå Kh√¥ng t√¨m th·∫•y kho·∫£n vay v·ªõi ID: ${loanId}`,
          data.message_id,
        );
        return;
      }

      await this.adminService.rejectLoan(loanId, data.sender_id, reason);
      await this.userService.sendSystemMessage(
        data.channel_id,
        `‚ùå ƒê√£ t·ª´ ch·ªëi kho·∫£n vay ${loanId} c·ªßa user ${loan.user.username} (${loan.user.userId}) - S·ªë ti·ªÅn: ${loan.amount}${reason ? ` - L√Ω do: ${reason}` : ''}`,
        data.message_id,
      );
    } catch (error) {
      await this.userService.sendSystemMessage(
        data.channel_id,
        `‚ùå L·ªói: ${error.message}`,
        data.message_id,
      );
    }
  }

  private async handleCreditCommand(data: ChannelMessage, parts: string[]) {
    if (parts.length < 4) {
      await this.userService.sendSystemMessage(
        data.channel_id,
        '‚ùå S·ª≠ d·ª•ng: $admin credit <user_name> <ƒëi·ªÉm_m·ªõi>',
        data.message_id,
      );
      return;
    }

    const userName = parts[2];

    const newScore = parseInt(parts[3]);

    try {
      const user = await this.adminService.getUserByUsername(userName);
      if (!user) {
        await this.userService.sendSystemMessage(
          data.channel_id,
          `‚ùå S·ª≠ d·ª•ng: user ${userName} ch∆∞a vay v·ªën ho·∫∑c kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng vui!`,
          data.message_id,
        );
        return;
      }

      const userId = user.id;

      if (!user) {
        await this.userService.sendSystemMessage(
          data.channel_id,
          `‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi ID: ${userId}`,
          data.message_id,
        );
        return;
      }

      const oldScore = user.creditScore;
      await this.adminService.adjustCreditScore(
        userId,
        newScore,
        data.sender_id,
      );
      await this.userService.sendSystemMessage(
        data.channel_id,
        `‚úÖ ƒê√£ ƒëi·ªÅu ch·ªânh ƒëi·ªÉm t√≠n d·ª•ng c·ªßa user ${user.username} (${userId}) t·ª´ ${oldScore} ‚Üí ${newScore}`,
        data.message_id,
      );
    } catch (error) {
      await this.userService.sendSystemMessage(
        data.channel_id,
        `‚ùå L·ªói: ${error.message}`,
        data.message_id,
      );
    }
  }

  private async handleBotBalanceCommand(data: ChannelMessage) {
    try {
      const balanceInfo = await this.adminService.getBotBalance();

      const message =
        `üí∞ **TH√îNG TIN BALANCE H·ªÜ TH·ªêNG**\n\n` +
        `ü§ñ **Bot Account:** ${balanceInfo.botUserId}\n` +
        `üí≥ **Balance hi·ªán t·∫°i:** ${formatVND(balanceInfo.balance)}\n\n` +
        `üìä **Th·ªëng k√™ t√†i ch√≠nh:**\n` +
        `üìà T·ªïng ti·ªÅn nh·∫≠n (payments): ${formatVND(balanceInfo.totalPaymentsReceived)}\n` +
        `üìâ T·ªïng ti·ªÅn cho vay: ${formatVND(balanceInfo.totalLoansGiven)}\n` +
        `üí∞ L·ª£i nhu·∫≠n r√≤ng: ${formatVND(balanceInfo.netProfit)}\n\n` +
        `üí° **Ghi ch√∫:** Balance n√†y bao g·ªìm t·∫•t c·∫£ ti·ªÅn t·ª´ thanh to√°n c·ªßa users`;

      await this.userService.sendSystemMessage(
        data.channel_id,
        message,
        data.message_id,
      );
    } catch (error) {
      await this.userService.sendSystemMessage(
        data.channel_id,
        `‚ùå L·ªói khi l·∫•y th√¥ng tin balance: ${error.message}`,
        data.message_id,
      );
    }
  }

  private async showAdminHelp(data: ChannelMessage) {
    const message =
      `üõ†Ô∏è L·ªánh Admin:\n` +
      `üìä $admin stats - Th·ªëng k√™ h·ªá th·ªëng\n` +
      `ÔøΩ $admin balance - Xem balance bot/treasury\n` +
      `ÔøΩüìã $admin loans - Xem kho·∫£n vay ch·ªù ph√™ duy·ªát\n` +
      `üë• $admin users - Xem danh s√°ch users\n` +
      `üîç $admin find <t√™n_ho·∫∑c_id> - T√¨m ki·∫øm user\n` +
      `üö´ $admin kick <user_name> [l√Ω do] - Kick user\n` +
      `‚ö†Ô∏è $admin warn <user_name> <l√Ω do> - C·∫£nh b√°o user\n` +
      `‚úÖ $admin approve <loan_id> - Ph√™ duy·ªát kho·∫£n vay\n` +
      `‚ùå $admin reject <loan_id> [l√Ω do] - T·ª´ ch·ªëi kho·∫£n vay\n` +
      `üí≥ $admin credit <user_name> <ƒëi·ªÉm> - ƒêi·ªÅu ch·ªânh ƒëi·ªÉm t√≠n d·ª•ng` +
      `üë• $admin add <user_name> <ƒëi·ªÉm> - ƒêi·ªÅu ch·ªânh ƒëi·ªÉm t√≠n d·ª•ng`;

    await this.userService.sendSystemMessage(
      data.channel_id,
      message,
      data.message_id,
    );
  }
}
